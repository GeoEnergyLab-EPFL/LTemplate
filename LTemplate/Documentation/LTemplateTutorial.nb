Notebook[{

Cell[CellGroupData[{
Cell["LTemplate Tutorial", "Title"],

Cell["write LibraryLink code with ease", "Subtitle"],

Cell[CellGroupData[{

Cell["What is LTemplate?", "Section"],

Cell[TextData[{
 "LTemplate is a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " package that simplifies writing LibraryLink code by automatically \
generating repetitive code based on \[OpenCurlyDoubleQuote]templates\
\[CloseCurlyDoubleQuote] describing a class interface."
}], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["An introduction through examples", "Section"],

Cell["Let\[CloseCurlyQuote]s load the package first.", "Text"],

Cell[BoxData[
 RowBox[{"<<", "LTemplate`"}]], "Input"],

Cell[CellGroupData[{

Cell["A basic example", "Subsection"],

Cell["\<\
LTemplate needs the current directory to contain the user written code.  For \
this example, we will create these files in the operating system\
\[CloseCurlyQuote]s temporary directory.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetDirectory", "[", "$TemporaryDirectory", "]"}]], "Input"],

Cell[BoxData["\<\"/private/var/folders/31/l_62jfs110lf0dh7k5n_y2th0000gn/T\"\>\
"], "Output"]
}, Open  ]],

Cell[TextData[{
 "LTemplate uses C++ and requires working with classes instead of top level \
functions.  After compiling and loading a template, classes can be \
instantiated as ",
 ButtonBox["managed library expressions",
  BaseStyle->"Link",
  ButtonData->
   "paclet:LibraryLink/tutorial/InteractionWithMathematica#353220453"],
 "."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "code", "=", 
   "\"\<\n#include <LTemplate.h>\n\nclass Demo1 {\npublic:\n\t// basic \
example\n\tmint addTwo(mint a, mint b) { return a+b; }\n\n\t// trace of real \
matrix\n\tdouble trace(mma::RealMatrixRef mat) {\n\t\tif (mat.rows() != \
mat.cols())\n\t\t\tthrow mma::LibraryError(\\\"trace: Square matrix expected.\
\\\");\n\t\tdouble sum = 0.0;\n\t\tfor (mint i=0; i < mat.rows(); ++i) {\n\t\t\
\tsum += mat(i,i);\n\t\t\tmma::check_abort(); // allow for user aborts\n\t\t}\
\n\t\treturn sum;\n\t}\n};\n\>\""}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<Demo1.h\>\"", ",", "code", ",", "\"\<String\>\""}], 
  "]"}]], "Input"],

Cell[BoxData["\<\"Demo1.h\"\>"], "Output"]
}, Open  ]],

Cell["\<\
Let us now define a template which mirrors the structure of this class:\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"template", "=", "\[IndentingNewLine]", 
   RowBox[{"LTemplate", "[", 
    RowBox[{"\"\<DemoLib\>\"", ",", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"LClass", "[", 
       RowBox[{"\"\<Demo1\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"LFun", "[", 
           RowBox[{"\"\<addTwo\>\"", ",", 
            RowBox[{"{", 
             RowBox[{"Integer", ",", "Integer"}], "}"}], ",", "Integer"}], 
           "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"LFun", "[", 
           RowBox[{"\"\<trace\>\"", ",", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{"Real", ",", "2"}], "}"}], "}"}], ",", "Real"}], 
           "]"}]}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
       "]"}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input"],

Cell[TextData[{
 "The type specifications are identical to the ones used in ",
 ButtonBox["LibraryFunctionLoad",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/LibraryFunctionLoad"],
 ", except for tensors with arbitrary element types (",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"_", ",", "_"}], "}"}], TraditionalForm]]],
 "), which are disallowed."
}], "Text"],

Cell["Templates can be formatted for readability:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"template", "//", "FormatTemplate"}]], "Input"],

Cell[BoxData["\<\"template DemoLib\\n\\nclass Demo1:\\n    Integer \
addTwo(Integer, Integer)\\n    Real trace({Real, 2})\"\>"], "Output"]
}, Open  ]],

Cell["\<\
Let\[CloseCurlyQuote]s generate code from the template and compile it.  \
CompileTemplate takes the same options as CreateLibrary.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CompileTemplate", "[", "template", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{",", " ", 
    RowBox[{"\"\<ShellCommandFunction\>\"", " ", "\[Rule]", " ", "Print"}], 
    ",", " ", 
    RowBox[{"\"\<ShellOutputFunction\>\"", "\[Rule]", "Print"}]}], "*)"}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   StyleBox["\<\"Current directory is: \"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\"/private/var/folders/31/l_62jfs110lf0dh7k5n_y2th0000gn/T\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]]}],
  SequenceForm[
   Style["Current directory is: ", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style["/private/var/folders/31/l_62jfs110lf0dh7k5n_y2th0000gn/T", 
    RGBColor[0, 0, 
     Rational[2, 3]]]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   StyleBox["\<\"Unloading library \"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\"DemoLib\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\" ...\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]]}],
  SequenceForm[
   Style["Unloading library ", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style["DemoLib", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style[" ...", 
    RGBColor[0, 0, 
     Rational[2, 3]]]],
  Editable->False]], "Print"],

Cell[BoxData[
 StyleBox["\<\"Generating library code ...\"\>",
  StripOnInput->False,
  LineColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FrontFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  BackFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  GraphicsColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FontColor->RGBColor[0, 0, 
    Rational[2, 3]]]], "Print"],

Cell[BoxData[
 StyleBox["\<\"Compiling library code ...\"\>",
  StripOnInput->False,
  LineColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FrontFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  BackFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  GraphicsColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FontColor->RGBColor[0, 0, 
    Rational[2, 3]]]], "Print"]
}, Open  ]],

Cell[BoxData["\<\"/Users/szhorvat/Library/Mathematica/SystemFiles/\
LibraryResources/MacOSX-x86-64/DemoLib.dylib\"\>"], "Output"]
}, Open  ]],

Cell["You can inspect the generated code:", "Text"],

Cell[BoxData[
 RowBox[{"SystemOpen", "[", "\"\<LTemplate-DemoLib.cpp\>\"", "]"}]], "Input"],

Cell[TextData[{
 Cell[BoxData[
  FormBox["CompileTemplate", TraditionalForm]],
  FormatType->"TraditionalForm"],
 " uses the function ",
 Cell[BoxData[
  FormBox["TranslateTemplate", TraditionalForm]],
  FormatType->"TraditionalForm"],
 " to generate the code. ",
 Cell[BoxData[
  FormBox[
   RowBox[{"TranslateTemplate", "[", "template", "]"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " returns the generated code as a string."
}], "Text"],

Cell["Automatically load the functions defined in the template:", "Text"],

Cell[BoxData[
 RowBox[{"LoadTemplate", "[", "template", "]"}]], "Input"],

Cell[TextData[{
 "This creates a ",
 StyleBox["Demo1", "Program"],
 " symbol within ",
 StyleBox["LTemplate`Classes`", "Program"],
 ", which has associated definitions that allow calling member functions and \
is also the base symbol for managed library expressions."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "LTemplate`Classes`*"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"class Demo1:\\n    Integer addTwo(Integer, Integer)\\n    Real \
trace({Real, 2})\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info-f2275b95-c81a-4499-ba61-ed2f60a71754"]
}, Open  ]],

Cell["\<\
Before we proceed, let us disable input/output history tracking to be able to \
demonstrate how managed library expressions get automatically destroyed:\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$HistoryLength", "=", "0"}], ";"}]], "Input"],

Cell["Now we are ready to create an instance of the class ...", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"demo1", "=", 
  RowBox[{"Make", "[", "\"\<Demo1\>\"", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"Demo1", "[", "1", "]"}]], "Output"]
}, Open  ]],

Cell["... and call the defined member functions:", "Text"],

Cell["Add two numbers:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"demo1", "@", 
  RowBox[{"\"\<addTwo\>\"", "[", 
   RowBox[{"123", ",", "234"}], "]"}]}]], "Input"],

Cell[BoxData["357"], "Output"]
}, Open  ]],

Cell["Trace of a real matrix:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"demo1", "@", 
  RowBox[{"\"\<trace\>\"", "[", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "5"}], "}"}]}], "]"}], "]"}]}]], "Input"],

Cell[BoxData["2.0800151803161127`"], "Output"]
}, Open  ]],

Cell[TextData[{
 "Error checking and reporting is supported through throwing an ",
 StyleBox["mma::LibraryError", "Program"],
 " exception.  Messages can otherwise be issued using ",
 StyleBox["mma::message()", "Program"],
 " or ",
 StyleBox["mma::print()", "Program"],
 "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"demo1", "@", 
  RowBox[{"\"\<trace\>\"", "[", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6"}], "}"}]}], "]"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LTemplate", "::", "error"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\(\\\"trace: Square matrix expected.\\\"\\)\
\[NoBreak]\"\>"}]], "Message", "MSG"],

Cell[BoxData[
 RowBox[{"LibraryFunctionError", "[", 
  RowBox[{"\<\"LIBRARY_FUNCTION_ERROR\"\>", ",", "6"}], "]"}]], "Output"]
}, Open  ]],

Cell["\<\
We can list all instances of a class. This is mainly useful for debugging \
leaks.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LExpressionList", "[", "\"\<Demo1\>\"", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Demo1", "[", "1", "]"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Once all references to an object are gone, it automatically gets destroyed.\
\>", "Text"],

Cell[BoxData[
 RowBox[{"demo1", "=."}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LExpressionList", "[", "\"\<Demo1\>\"", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["A solution for returning multiple values", "Subsection"],

Cell[TextData[{
 "LibraryLink doesn\[CloseCurlyQuote]t support returning multiple \
heterogeneous results (e.g. two tensors of different dimensions) without \
using a ",
 StyleBox["MathLink",
  FontSlant->"Italic"],
 " connection.  A workaround is having separate functions for \
initialization/computation, retrieving each piece of result and finally \
freeing data structures (cleanup).  Doing all this manually is very tedious, \
but LTemplate makes it quite easy."
}], "Text"],

Cell["\<\
Let\[CloseCurlyQuote]s look at a simple example which computes the mean and \
variance of a list in a single loop, then returns them separately.  We need \
one function for the computation, and one function for each return.  We also \
need to store results before they\[CloseCurlyQuote]re returned.  This storage \
space would normally need to be cleaned up manually, but since LTemplate uses \
managed library expressions, this will be taken care of automatically.  We \
include a constructor and destructor that report when they are called, to \
demonstrate automatic cleanup.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetDirectory", "[", "$TemporaryDirectory", "]"}]], "Input"],

Cell[BoxData["\<\"/private/var/folders/31/l_62jfs110lf0dh7k5n_y2th0000gn/T\"\>\
"], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "code", "=", 
   "\"\<\nclass MeanVariance {\n\tdouble m, v;\n\npublic:\n\tMeanVariance() { \
mma::print(\\\"constructor called\\\"); }\n\t~MeanVariance() { \
mma::print(\\\"destructor called\\\"); }\n\n\tvoid compute(mma::RealTensorRef \
vec) {\n\t\tdouble sum = 0.0, sum2 = 0.0;\n\t\tfor (mint i=0; i < \
vec.length(); ++i) {\n\t\t\tsum  += vec[i];\n\t\t\tsum2 += vec[i]*vec[i];\n\t\
\t}\n\t\tm = sum / vec.length();\n\t\tv = sum2 / vec.length() - m*m;\n\t}\n\n\
\tdouble mean() { return m; }\n\tdouble variance() { return v; }\n};\n\>\""}],
   ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<MeanVariance.h\>\"", ",", "code", ",", "\"\<String\>\""}], 
  "]"}]], "Input"],

Cell[BoxData["\<\"MeanVariance.h\"\>"], "Output"]
}, Open  ]],

Cell[TextData[{
 "If a template contains only a single class, ",
 StyleBox["LTemplate[\[Ellipsis]]", "Program"],
 " can be omitted."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"template", "=", "\[IndentingNewLine]", 
   RowBox[{"LClass", "[", 
    RowBox[{"\"\<MeanVariance\>\"", ",", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"LFun", "[", 
        RowBox[{"\"\<compute\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"Real", ",", "_", ",", "\"\<Constant\>\""}], "}"}], "}"}], 
         ",", "\"\<Void\>\""}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"LFun", "[", 
        RowBox[{"\"\<mean\>\"", ",", 
         RowBox[{"{", "}"}], ",", "Real"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"LFun", "[", 
        RowBox[{"\"\<variance\>\"", ",", 
         RowBox[{"{", "}"}], ",", "Real"}], "]"}]}], "\[IndentingNewLine]", 
      "}"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CompileTemplate", "[", "template", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   StyleBox["\<\"Current directory is: \"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\"/private/var/folders/31/l_62jfs110lf0dh7k5n_y2th0000gn/T\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]]}],
  SequenceForm[
   Style["Current directory is: ", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style["/private/var/folders/31/l_62jfs110lf0dh7k5n_y2th0000gn/T", 
    RGBColor[0, 0, 
     Rational[2, 3]]]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   StyleBox["\<\"Unloading library \"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\"MeanVariance\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\" ...\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]]}],
  SequenceForm[
   Style["Unloading library ", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style["MeanVariance", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style[" ...", 
    RGBColor[0, 0, 
     Rational[2, 3]]]],
  Editable->False]], "Print"],

Cell[BoxData[
 StyleBox["\<\"Generating library code ...\"\>",
  StripOnInput->False,
  LineColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FrontFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  BackFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  GraphicsColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FontColor->RGBColor[0, 0, 
    Rational[2, 3]]]], "Print"],

Cell[BoxData[
 StyleBox["\<\"Compiling library code ...\"\>",
  StripOnInput->False,
  LineColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FrontFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  BackFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  GraphicsColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FontColor->RGBColor[0, 0, 
    Rational[2, 3]]]], "Print"]
}, Open  ]],

Cell[BoxData["\<\"/Users/szhorvat/Library/Mathematica/SystemFiles/\
LibraryResources/MacOSX-x86-64/MeanVariance.dylib\"\>"], "Output"]
}, Open  ]],

Cell["\<\
Setting up all of this manually would have taken a lot of time and a lot of \
boilerplate code.  This class with only three functions required 119 lines of \
boilerplate:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "@", 
  RowBox[{"StringSplit", "[", 
   RowBox[{
    RowBox[{"Import", "[", 
     RowBox[{"\"\<LTemplate-MeanVariance.cpp\>\"", ",", "\"\<String\>\""}], 
     "]"}], ",", "\"\<\\n\>\""}], "]"}]}]], "Input"],

Cell[BoxData["119"], "Output"]
}, Open  ]],

Cell["Let us load the library and create a wrapper for using it.", "Text"],

Cell[BoxData[
 RowBox[{"LoadTemplate", "[", "template", "]"}]], "Input"],

Cell[TextData[{
 "On the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " side, we use ",
 StyleBox["Block", "Program"],
 " to create temporary objects that live only until all results are retrieved."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"meanVariance", "[", "arr_", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"obj", "=", 
      RowBox[{"Make", "[", "MeanVariance", "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"obj", "@", 
      RowBox[{"\"\<compute\>\"", "[", "arr", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"obj", "@", 
        RowBox[{"\"\<mean\>\"", "[", "]"}]}], ",", 
       RowBox[{"obj", "@", 
        RowBox[{"\"\<variance\>\"", "[", "]"}]}]}], "}"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[TextData[{
 StyleBox["Side note:",
  FontWeight->"Bold"],
 " Block performs slightly better than Module, and in this particular \
application this performance difference can be noticeable. Make sure you \
understand ",
 ButtonBox["the caveats of Block",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://mathematica.stackexchange.com/a/633/12"], None},
  ButtonNote->"http://mathematica.stackexchange.com/a/633/12"],
 " before using it. A rule of thumb is that a function like this can safely \
use Block is no symbols will ever be passed into it. "
}], "Text"],

Cell["Let\[CloseCurlyQuote]s test it:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"list", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", "100"}], "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"meanVariance", "[", "list", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData["\<\"constructor called\"\>"], "Print"],

Cell[BoxData["\<\"destructor called\"\>"], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.48769528760926384`", ",", "0.07238465691327894`"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["\<\
We can also verify directly that no more instance of the class exist:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LExpressionList", "[", "MeanVariance", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Additional examples", "Subsection"],

Cell[CellGroupData[{

Cell["User aborts and returning tensors", "Subsubsection"],

Cell["\<\
The following example demonstrate user aborts and returning tensors.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetDirectory", "[", "$TemporaryDirectory", "]"}]], "Input"],

Cell[BoxData["\<\"/private/var/folders/31/l_62jfs110lf0dh7k5n_y2th0000gn/T\"\>\
"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "code", "=", 
   "\"\<\nclass Demo2 {\npublic:\n\t// demo for user abort\n\tvoid hang() { \n\
\t\tmma::print(\\\"Going into infinite loop ... try aborting now.\\\");\n\t\t\
while(true) {\n#if defined(_WIN32) || defined (_WIN64)\n\t\t\tSleep(100); // \
sleep 0.1 s on Windows\n#else \n\t\t\tusleep(100000);   // sleep 0.1 s on \
POSIX\n#endif\n\t\t\tmma::check_abort(); \n\t\t} \n\t}\n\n\t// demo for \
returning tensors\n\tmma::IntTensorRef range(mint a, mint b) {\n\t\t\
mma::IntTensorRef vec = mma::makeVector<mint>(b-a+1);\n\t\tfor (int i=0; i <= \
b-a; ++i)\n\t\t\tvec[i] = a+i;\n\t\treturn vec;\n\t}\n};\n\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Export", "[", 
  RowBox[{"\"\<Demo2.h\>\"", ",", "code", ",", "\"\<String\>\""}], 
  "]"}]}], "Input"],

Cell[BoxData["\<\"Demo2.h\"\>"], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"template", "=", "\[IndentingNewLine]", 
   RowBox[{"LClass", "[", 
    RowBox[{"\"\<Demo2\>\"", ",", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"LFun", "[", 
        RowBox[{"\"\<hang\>\"", ",", 
         RowBox[{"{", "}"}], ",", "\"\<Void\>\""}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"LFun", "[", 
        RowBox[{"\"\<range\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"Integer", ",", "Integer"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Integer", ",", "1"}], "}"}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CompileTemplate", "[", "template", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   StyleBox["\<\"Current directory is: \"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\"/private/var/folders/31/l_62jfs110lf0dh7k5n_y2th0000gn/T\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]]}],
  SequenceForm[
   Style["Current directory is: ", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style["/private/var/folders/31/l_62jfs110lf0dh7k5n_y2th0000gn/T", 
    RGBColor[0, 0, 
     Rational[2, 3]]]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   StyleBox["\<\"Unloading library \"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\"Demo2\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\" ...\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]]}],
  SequenceForm[
   Style["Unloading library ", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style["Demo2", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style[" ...", 
    RGBColor[0, 0, 
     Rational[2, 3]]]],
  Editable->False]], "Print"],

Cell[BoxData[
 StyleBox["\<\"Generating library code ...\"\>",
  StripOnInput->False,
  LineColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FrontFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  BackFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  GraphicsColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FontColor->RGBColor[0, 0, 
    Rational[2, 3]]]], "Print"],

Cell[BoxData[
 StyleBox["\<\"Compiling library code ...\"\>",
  StripOnInput->False,
  LineColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FrontFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  BackFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  GraphicsColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FontColor->RGBColor[0, 0, 
    Rational[2, 3]]]], "Print"]
}, Open  ]],

Cell[BoxData["\<\"/Users/szhorvat/Library/Mathematica/SystemFiles/\
LibraryResources/MacOSX-x86-64/Demo2.dylib\"\>"], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"LoadTemplate", "[", "template", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"demo2", "=", 
   RowBox[{"Make", "[", "Demo2", "]"}]}], ";"}]], "Input"],

Cell["\<\
User aborts are supported though mma::check_abort().  This function will \
never return so you\[CloseCurlyQuote]ll need to use Evaluation \[Rule] Abort \
Evaluation to stop it.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"demo2", "@", 
  RowBox[{"\"\<hang\>\"", "[", "]"}]}]], "Input"],

Cell[BoxData["\<\"Going into infinite loop ... try aborting now.\"\>"], \
"Print"],

Cell[BoxData["$Aborted"], "Output"]
}, Open  ]],

Cell["This functions returns an integer vector:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"demo2", "@", 
  RowBox[{"\"\<range\>\"", "[", 
   RowBox[{"10", ",", "20"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",",
    "17", ",", "18", ",", "19", ",", "20"}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Working with strings", "Subsubsection"],

Cell[TextData[{
 "Returning strings from LibraryLink without resorting to ",
 StyleBox["MathLink",
  FontSlant->"Italic"],
 " can be cumbersome when the strings are not stored permanently as constant \
data in the library.  This is because it is the library\[CloseCurlyQuote]s \
responsibility to allocate memory for the string and to free it.  Generally, \
freeing the string must be done in a separate function call from the one \
returning the string."
}], "Text"],

Cell["\<\
Since LTemplate always creates managed library expressions, freeing the \
string can be made part of releasing the expression.\
\>", "Text"],

Cell[TextData[{
 "More information on returning strings from LibraryLink: ",
 ButtonBox["http://mathematica.stackexchange.com/q/55171/12",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://mathematica.stackexchange.com/q/55171/12"], None},
  ButtonNote->"http://mathematica.stackexchange.com/q/55171/12"]
}], "Text"],

Cell["The following example reverses a string:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", "$TemporaryDirectory", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
  "code", "=", 
   "\"\<\n#include <string>\n#include <algorithm>\n\nclass ReverseString {\n\t\
std::string str;\n\npublic:\n\tconst char *reverse(const char *in) {\n\t\tstr \
= in;\t\t\n\t\tmma::disownString(in); // release the string that Mathematica \
passes in\n\t\tstd::reverse(str.begin(), str.end());\n\t\treturn str.c_str();\
\n\t}\n};\n\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Export", "[", 
  RowBox[{"\"\<ReverseString.h\>\"", ",", "code", ",", "\"\<String\>\""}], 
  "]"}]}], "Input"],

Cell[BoxData["\<\"ReverseString.h\"\>"], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"template", "=", 
   RowBox[{"LClass", "[", 
    RowBox[{"\"\<ReverseString\>\"", ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"LFun", "[", 
       RowBox[{"\"\<reverse\>\"", ",", 
        RowBox[{"{", "\"\<UTF8String\>\"", "}"}], ",", "\"\<UTF8String\>\""}],
        "]"}], "}"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CompileTemplate", "[", "template", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   StyleBox["\<\"Current directory is: \"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\"/private/var/folders/31/l_62jfs110lf0dh7k5n_y2th0000gn/T\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]]}],
  SequenceForm[
   Style["Current directory is: ", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style["/private/var/folders/31/l_62jfs110lf0dh7k5n_y2th0000gn/T", 
    RGBColor[0, 0, 
     Rational[2, 3]]]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   StyleBox["\<\"Unloading library \"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\"ReverseString\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\" ...\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]]}],
  SequenceForm[
   Style["Unloading library ", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style["ReverseString", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style[" ...", 
    RGBColor[0, 0, 
     Rational[2, 3]]]],
  Editable->False]], "Print"],

Cell[BoxData[
 StyleBox["\<\"Generating library code ...\"\>",
  StripOnInput->False,
  LineColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FrontFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  BackFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  GraphicsColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FontColor->RGBColor[0, 0, 
    Rational[2, 3]]]], "Print"],

Cell[BoxData[
 StyleBox["\<\"Compiling library code ...\"\>",
  StripOnInput->False,
  LineColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FrontFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  BackFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  GraphicsColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FontColor->RGBColor[0, 0, 
    Rational[2, 3]]]], "Print"]
}, Open  ]],

Cell[BoxData["\<\"/Users/szhorvat/Library/Mathematica/SystemFiles/\
LibraryResources/MacOSX-x86-64/ReverseString.dylib\"\>"], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"LoadTemplate", "[", "template", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"reverse", "[", "str_String", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"rs", "=", 
      RowBox[{"Make", "[", "ReverseString", "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"rs", "@", 
     RowBox[{"\"\<reverse\>\"", "[", "str", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reverse", "[", "\"\<Dennis sinned.\>\"", "]"}]], "Input"],

Cell[BoxData["\<\".dennis sinneD\"\>"], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Using LinkObject based passing", "Subsubsection"],

Cell[TextData[{
 "LibraryLink functions can use LinkObject-based argument passing and return, \
",
 ButtonBox["as described in the LibraryLink tutorial",
  BaseStyle->"Link",
  ButtonData->"paclet:LibraryLink/tutorial/LibraryStructure#606935091"],
 ". This is supported by LTemplate as well. The argument type specification \
in LFun follows the LibraryLink convention again:"
}], "Text"],

Cell[BoxData[
 RowBox[{"LFun", "[", 
  RowBox[{"\"\<functionName\>\"", ",", "LinkObject", ",", "LinkObject"}], 
  "]"}]], "Input",
 Evaluatable->False],

Cell["This can be shortened for convenience:", "Text"],

Cell[BoxData[
 RowBox[{"LFun", "[", 
  RowBox[{"\"\<functionName\>\"", ",", "LinkObject"}], "]"}]], "Input",
 Evaluatable->False],

Cell["\<\
The corresponding C++ member function takes a single MLINK argument and has \
void return type.  Here\[CloseCurlyQuote]s a full example:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SetDirectory", "[", "$TemporaryDirectory", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "code", "=", 
   "\"\<\nclass LinkObjDemo {\npublic:\n\tvoid addTwo(MLINK link) {\n\t\t// \
get arguments\n\t\tint argc = 2; // two arguments expected\n\t\tif (! \
MLTestHeadWithArgCount(link, \\\"List\\\", &argc))\n\t\t\tthrow \
mma::LibraryError(\\\"addTwo: two arguments expected.\\\");\n\t\tint a, b;\n\t\
\tint okay = MLGetInteger32(link, &a) && MLGetInteger32(link, &b);\n\t\tif (! \
okay)\n\t\t\tthrow mma::LibraryError(\\\"addTwo: integer arguments \
expected.\\\");\n\t\t\n\t\t// compute result\n\t\tint result = a+b;\n\n\t\t// \
return result\n\t\tMLNewPacket(link);\n\t\tMLPutInteger32(link, result);\n    \
}\n};\n\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"\"\<LinkObjDemo.h\>\"", ",", "code", ",", "\"\<String\>\""}], 
   "]"}], ";"}]}], "Input"],

Cell[BoxData["\<\"/private/var/folders/31/l_62jfs110lf0dh7k5n_y2th0000gn/T\"\>\
"], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"template", "=", 
   RowBox[{"LClass", "[", 
    RowBox[{"\"\<LinkObjDemo\>\"", ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"LFun", "[", 
       RowBox[{"\"\<addTwo\>\"", ",", "LinkObject"}], "]"}], "}"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CompileTemplate", "[", "template", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   StyleBox["\<\"Current directory is: \"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\"/private/var/folders/31/l_62jfs110lf0dh7k5n_y2th0000gn/T\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]]}],
  SequenceForm[
   Style["Current directory is: ", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style["/private/var/folders/31/l_62jfs110lf0dh7k5n_y2th0000gn/T", 
    RGBColor[0, 0, 
     Rational[2, 3]]]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   StyleBox["\<\"Unloading library \"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\"LinkObjDemo\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\" ...\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]]}],
  SequenceForm[
   Style["Unloading library ", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style["LinkObjDemo", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style[" ...", 
    RGBColor[0, 0, 
     Rational[2, 3]]]],
  Editable->False]], "Print"],

Cell[BoxData[
 StyleBox["\<\"Generating library code ...\"\>",
  StripOnInput->False,
  LineColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FrontFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  BackFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  GraphicsColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FontColor->RGBColor[0, 0, 
    Rational[2, 3]]]], "Print"],

Cell[BoxData[
 StyleBox["\<\"Compiling library code ...\"\>",
  StripOnInput->False,
  LineColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FrontFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  BackFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  GraphicsColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FontColor->RGBColor[0, 0, 
    Rational[2, 3]]]], "Print"]
}, Open  ]],

Cell[BoxData["\<\"/Users/szhorvat/Library/Mathematica/SystemFiles/\
LibraryResources/MacOSX-x86-64/LinkObjDemo.dylib\"\>"], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"LoadTemplate", "[", "template", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"obj", "=", 
   RowBox[{"Make", "[", "LinkObjDemo", "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"obj", "@", 
  RowBox[{"\"\<addTwo\>\"", "[", 
   RowBox[{"5", ",", "7"}], "]"}]}]], "Input"],

Cell[BoxData["12"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"obj", "@", 
  RowBox[{"\"\<addTwo\>\"", "[", "1", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LTemplate", "::", "error"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\(\\\"addTwo: two arguments expected.\\\"\\)\
\[NoBreak]\"\>"}]], "Message", "MSG"],

Cell[BoxData[
 RowBox[{"LibraryFunctionError", "[", 
  RowBox[{"\<\"LIBRARY_FUNCTION_ERROR\"\>", ",", "6"}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"obj", "@", 
  RowBox[{"\"\<addTwo\>\"", "[", 
   RowBox[{"a", ",", "2"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LTemplate", "::", "error"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\(\\\"addTwo: integer arguments \
expected.\\\"\\)\[NoBreak]\"\>"}]], "Message", "MSG"],

Cell[BoxData[
 RowBox[{"LibraryFunctionError", "[", 
  RowBox[{"\<\"LIBRARY_FUNCTION_ERROR\"\>", ",", "6"}], "]"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Note:",
  FontWeight->"Bold"],
 " Since ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 10, there are two versions of the ",
 StyleBox["MathLink",
  FontSlant->"Italic"],
 "/WSTP development kit: one that uses ML prefixed function names and one \
that uses WS prefixed ones.  At this point it is recommended to use the \
ML-prefixed names with LTemplate."
}], "Text"],

Cell[TextData[{
 "An auxiliary header, ",
 StyleBox["mlstream.h", "Program"],
 ", is provided to simplify ",
 StyleBox["MathLink",
  FontSlant->"Italic"],
 " based argument passing and return using stream inserter and extractor \
syntax. Here\[CloseCurlyQuote]s an example:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SetDirectory", "[", "$TemporaryDirectory", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "code", "=", 
   "\"\<\n#include <mlstream.h>\n\nclass LinkObjDemo {\npublic:\n\tvoid \
addMultTwo(MLINK link) {\n\t\tmlStream ml(link, \\\"addMultTwo\\\"); // \
optionally provide a name, here addMultTwo, used in error reporting\n\t\tint \
a, b;\n\t\tml >> mlCheckArgs(2) // two arguments expected\n\t\t   >> a >> b;\n\
\t\t\n\t\t// compute result\n\t\tint sum = a+b;\n\t\tint prod = a*b;\n\n\t\t\
// return result\n\t\tml.newPacket();\n\t\tml << mlHead(\\\"List\\\", 2) // \
return a list of two elements\n           << sum << prod; // put the two \
elements on the link\n    }\n};\n\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"\"\<LinkObjDemo.h\>\"", ",", "code", ",", "\"\<String\>\""}], 
   "]"}], ";"}]}], "Input"],

Cell[BoxData["\<\"/private/var/folders/31/l_62jfs110lf0dh7k5n_y2th0000gn/T\"\>\
"], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"template", "=", 
   RowBox[{"LClass", "[", 
    RowBox[{"\"\<LinkObjDemo\>\"", ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"LFun", "[", 
       RowBox[{"\"\<addMultTwo\>\"", ",", "LinkObject"}], "]"}], "}"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CompileTemplate", "[", "template", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   StyleBox["\<\"Current directory is: \"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\"/private/var/folders/31/l_62jfs110lf0dh7k5n_y2th0000gn/T\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]]}],
  SequenceForm[
   Style["Current directory is: ", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style["/private/var/folders/31/l_62jfs110lf0dh7k5n_y2th0000gn/T", 
    RGBColor[0, 0, 
     Rational[2, 3]]]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   StyleBox["\<\"Unloading library \"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\"LinkObjDemo\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\" ...\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]]}],
  SequenceForm[
   Style["Unloading library ", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style["LinkObjDemo", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style[" ...", 
    RGBColor[0, 0, 
     Rational[2, 3]]]],
  Editable->False]], "Print"],

Cell[BoxData[
 StyleBox["\<\"Generating library code ...\"\>",
  StripOnInput->False,
  LineColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FrontFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  BackFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  GraphicsColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FontColor->RGBColor[0, 0, 
    Rational[2, 3]]]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   StyleBox["\<\"LTemplate-LinkObjDemo.cpp\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\" already exists and will be overwritten.\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]]}],
  SequenceForm[
   Style["LTemplate-LinkObjDemo.cpp", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style[" already exists and will be overwritten.", 
    RGBColor[0, 0, 
     Rational[2, 3]]]],
  Editable->False]], "Print"],

Cell[BoxData[
 StyleBox["\<\"Compiling library code ...\"\>",
  StripOnInput->False,
  LineColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FrontFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  BackFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  GraphicsColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FontColor->RGBColor[0, 0, 
    Rational[2, 3]]]], "Print"]
}, Open  ]],

Cell[BoxData["\<\"/Users/szhorvat/Library/Mathematica/SystemFiles/\
LibraryResources/MacOSX-x86-64/LinkObjDemo.dylib\"\>"], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"LoadTemplate", "[", "template", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"obj", "=", 
   RowBox[{"Make", "[", "LinkObjDemo", "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"obj", "@", 
  RowBox[{"\"\<addMultTwo\>\"", "[", 
   RowBox[{"2", ",", "3"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "6"}], "}"}]], "Output"]
}, Open  ]],

Cell["mlstream provides some basic error checking:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"obj", "@", 
  RowBox[{"\"\<addMultTwo\>\"", "[", 
   RowBox[{"2", ",", "3", ",", "4"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LTemplate", "::", "error"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\(\\\"addMultTwo: 2 arguments expected, 3 \
received.\\\"\\)\[NoBreak]\"\>"}]], "Message", "MSG"],

Cell[BoxData[
 RowBox[{"LibraryFunctionError", "[", 
  RowBox[{"\<\"LIBRARY_FUNCTION_ERROR\"\>", ",", "6"}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"obj", "@", 
  RowBox[{"\"\<addMultTwo\>\"", "[", 
   RowBox[{"\"\<a\>\"", ",", "2"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LTemplate", "::", "error"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\(\\\"addMultTwo: Integer32 expected.\\\"\\)\
\[NoBreak]\"\>"}]], "Message", "MSG"],

Cell[BoxData[
 RowBox[{"LibraryFunctionError", "[", 
  RowBox[{"\<\"LIBRARY_FUNCTION_ERROR\"\>", ",", "6"}], "]"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "But beware that certain types are auto-converted by ",
 StyleBox["MathLink",
  FontSlant->"Italic"],
 "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"obj", "@", 
  RowBox[{"\"\<addMultTwo\>\"", "[", 
   RowBox[{"2.3", ",", "3"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "6"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
The floating point number 2.3 was automatically rounded to the integer 2.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Accessing other library expressions", "Subsubsection"],

Cell["\<\
Other library expression can be passed to library functions using the type \
specification\
\>", "Text"],

Cell[BoxData[
 RowBox[{"LExpressionID", "[", "\"\<SomeClass\>\"", "]"}]], "Input",
 Evaluatable->False],

Cell[TextData[{
 "In the following we implement a \[OpenCurlyDoubleQuote]vector\
\[CloseCurlyDoubleQuote] class with a dot product member function. The ",
 Cell[BoxData[
  FormBox[
   RowBox[{"dot", "(", ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " member function will take another instance of the same class as its \
argument."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", "$TemporaryDirectory", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "code", "=", 
   "\"\<\n#include <vector>\n#include <algorithm>\n#include <numeric>\n\n\
class VectorDemo {\n\tstd::vector<double> v;\npublic:\n\t// set elements of \
the vector\n\tvoid set(mma::RealTensorRef t) {\n\t\tv.resize(t.length());\n\t\
\tstd::copy(t.begin(), t.end(), v.begin());\n\t}\n\n\t// dot product with \
another vector\n\tdouble dot(const VectorDemo &vec) {\n\t\tif (v.size() != \
vec.v.size())\n\t\t\tthrow mma::LibraryError(\\\"Incompatible vector \
sizes\\\");\n\t\treturn std::inner_product(v.begin(), v.end(), vec.v.begin(), \
0.0);\n\t}\n};\n\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"\"\<VectorDemo.h\>\"", ",", "code", ",", "\"\<String\>\""}], 
   "]"}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"template", "=", "\[IndentingNewLine]", 
   RowBox[{"LClass", "[", 
    RowBox[{"\"\<VectorDemo\>\"", ",", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"LFun", "[", 
        RowBox[{"\"\<set\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"Real", ",", "1", ",", "\"\<Constant\>\""}], "}"}], "}"}], 
         ",", "\"\<Void\>\""}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"LFun", "[", 
        RowBox[{"\"\<dot\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"LExpressionID", "[", "\"\<VectorDemo\>\"", "]"}], "}"}], 
         ",", "Real"}], "]"}]}], "\[IndentingNewLine]", "}"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CompileTemplate", "[", "template", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   StyleBox["\<\"Current directory is: \"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\"/private/var/folders/31/l_62jfs110lf0dh7k5n_y2th0000gn/T\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]]}],
  SequenceForm[
   Style["Current directory is: ", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style["/private/var/folders/31/l_62jfs110lf0dh7k5n_y2th0000gn/T", 
    RGBColor[0, 0, 
     Rational[2, 3]]]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   StyleBox["\<\"Unloading library \"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\"VectorDemo\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]], "\[InvisibleSpace]", 
   StyleBox["\<\" ...\"\>",
    StripOnInput->False,
    LineColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FrontFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    BackFaceColor->RGBColor[0, 0, 
      Rational[2, 3]],
    GraphicsColor->RGBColor[0, 0, 
      Rational[2, 3]],
    FontColor->RGBColor[0, 0, 
      Rational[2, 3]]]}],
  SequenceForm[
   Style["Unloading library ", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style["VectorDemo", 
    RGBColor[0, 0, 
     Rational[2, 3]]], 
   Style[" ...", 
    RGBColor[0, 0, 
     Rational[2, 3]]]],
  Editable->False]], "Print"],

Cell[BoxData[
 StyleBox["\<\"Generating library code ...\"\>",
  StripOnInput->False,
  LineColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FrontFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  BackFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  GraphicsColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FontColor->RGBColor[0, 0, 
    Rational[2, 3]]]], "Print"],

Cell[BoxData[
 StyleBox["\<\"Compiling library code ...\"\>",
  StripOnInput->False,
  LineColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FrontFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  BackFaceColor->RGBColor[0, 0, 
    Rational[2, 3]],
  GraphicsColor->RGBColor[0, 0, 
    Rational[2, 3]],
  FontColor->RGBColor[0, 0, 
    Rational[2, 3]]]], "Print"]
}, Open  ]],

Cell[BoxData["\<\"/Users/szhorvat/Library/Mathematica/SystemFiles/\
LibraryResources/MacOSX-x86-64/VectorDemo.dylib\"\>"], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"LoadTemplate", "[", "template", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"makeVector", "[", "arr_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"v", "=", 
      RowBox[{"Make", "[", "\"\<VectorDemo\>\"", "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"v", "@", 
      RowBox[{"\"\<set\>\"", "[", "arr", "]"}]}], ";", "v"}]}], 
   "]"}]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"v1", "=", 
  RowBox[{"makeVector", "[", 
   RowBox[{"Range", "[", "10", "]"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"VectorDemo", "[", "1", "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"v2", "=", 
  RowBox[{"makeVector", "[", 
   RowBox[{"Range", "[", 
    RowBox[{"10", ",", "1", ",", 
     RowBox[{"-", "1"}]}], "]"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"VectorDemo", "[", "2", "]"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "When calling ",
 Cell[BoxData[
  FormBox[
   RowBox[{"dot", "(", ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " from ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", we cannot simply pass ",
 Cell[BoxData[
  FormBox["v2", TraditionalForm]],
  FormatType->"TraditionalForm"],
 " to it. Instead we must pass its managed library expression ID. The reason \
for not translating ",
 Cell[BoxData[
  FormBox["v2", TraditionalForm]],
  FormatType->"TraditionalForm"],
 " to an expression ID automatically is to maintain runtime performance."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"v1", "@", 
  RowBox[{"\"\<dot\>\"", "[", 
   RowBox[{"ManagedLibraryExpressionID", "[", "v2", "]"}], "]"}]}]], "Input"],

Cell[BoxData["220.`"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Range", "[", "10", "]"}], ".", 
  RowBox[{"Range", "[", 
   RowBox[{"10", ",", "1", ",", 
    RowBox[{"-", "1"}]}], "]"}]}]], "Input"],

Cell[BoxData["220"], "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Deployment", "Section"],

Cell[TextData[{
 "LTemplate can either be used as a standalone package or it can be embedded \
in a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " application. When used as standalone package, it can be loaded using ",
 StyleBox["<<LTemplate`", "Program"],
 ". However, when building a package using LTemplate, it is best to embed \
LTemplate directly into the package. This is to avoid users having to install \
LTemplate in order for the package to work, and also to avoid breaking the \
package if LTemplate is upgraded to a new version."
}], "Text"],

Cell[TextData[{
 "LTemplate can be embedded as follows. Suppose the package is called MyApp. \
Then it should have the following directory hierarchy, conforming to standard \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " application structure:"
}], "Text"],

Cell["\<\
MyApp
   \\--- Kernel
   |       \\--- init.m (Initialization file typically containing \
Get[\"MyApp`MyApp`\"])
   |
   |--- LTemplate
   |       \\--- ... (the complete LTemplate application directory)
   |
   |--- LibraryResources
   |       \\--- Source (directory that contains the C++ source files)
   |       |
   |       |--- MacOSX-x86-64 (OS X binaries)
   |       |
   |       | ...  (directories for other supported $SystemID values)
   |
   |--- MyApp.m (main package file)\
\>", "Program"],

Cell[TextData[{
 "The ",
 StyleBox["MyApp.m", "Program"],
 " package file must then load LTemplate like this:"
}], "Text"],

Cell[TextData[{
 "BeginPackage[\"MyApp`\"]\n\nSomeSymbol::usage = \"SomeSymbol is a symbol to \
which MyApp messages are associated.\"\n\n(* Privately load LTemplate. Note \
the leading ` character!! *)\nGet[\"`LTemplate`LTemplatePrivate`\"]\n\n(* \
ConfigureLTemplate[] ",
 StyleBox["must",
  FontSlant->"Italic"],
 " be called at this point.\n   You should also supply a symbol from the \
MyApp` context (called SomeSymbol here) to\n   associate LTemplate's standard \
::error, ::warning, etc. messages with.\n *)\n\
ConfigureLTemplate[\"MessageSymbol\" -> SomeSymbol]\n\n(* Public MyApp \
package symbols go here *)\n\nBegin[\"`Private`\"]\n\n(* What follows is a \
recommended package structure,\n   but it is not required to follow this \
pattern.\n *)\n$packageDirectory  = DirectoryName[$InputFileName];\n\
$libraryDirectory  = FileNameJoin[{$packageDirectory, \"LibraryResources\", \
$SystemID}];\n$sourceDirectory   = FileNameJoin[{$packageDirectory, \
\"LibraryResources\", \"Source\"}];\n\n(* Add $libraryDirectory to \
$LibraryPath in case the package \n   is not installed in \
$UserBaseDirectory/Applications. \n *)\nIf[Not@MemberQ[$LibraryPath, \
$libraryDirectory],\n  AppendTo[$LibraryPath, $libraryDirectory]\n]\n\n\
template = LTemplate[...]; (* template specification *)\n\n(* These two \
functions will probably incorporate additional checks and options: *)\n\
loadMyApp[] := LoadTemplate[template]\ncompileMyApp[] := \
CompileTemplate[template, \"TargetDirectory\" -> $libraryDirectory]\n\n\
loadMyApp[] (* load template *)\n\n(* MyApp function definitions and private \
symbols go here *)\n\nEnd[]\nEndPackage[]\n"
}], "Program"],

Cell["\<\
LTemplate functions will now reside in the MyApp`LTemplate` context, and will \
not be visible to the users of your package. This also avoids conflicts \
between multiple applications using various versions of LTemplate.\
\>", "Text"],

Cell[TextData[{
 "For an example of a project that uses LTemplate see IGraph/M at ",
 ButtonBox["https://github.com/szhorvat/IGraphM",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/szhorvat/IGraphM"], None},
  ButtonNote->"https://github.com/szhorvat/IGraphM"]
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Reference", "Section"],

Cell[CellGroupData[{

Cell["Mathematica", "Subsection"],

Cell["Refer to usage messages until this section is finished.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "LTemplate`*"}]], "Input"],

Cell[BoxData[
 DynamicModuleBox[{Typeset`open$$ = True}, 
  PaneSelectorBox[{False->
   RowBox[{
    OpenerBox[Dynamic[Typeset`open$$],
     ImageSize->Small], 
    StyleBox["LTemplate`", "InfoHeading"]}], True->GridBox[{
     {
      RowBox[{
       OpenerBox[Dynamic[Typeset`open$$],
        ImageSize->Small], 
       StyleBox["LTemplate`", "InfoHeading"]}]},
     {GridBox[{
        {
         ButtonBox["CompileTemplate",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info-b1050bb8-b948-47cd-be6e-89d2c6247521", {
            "CompileTemplate", "LTemplate`"}},
          ButtonNote->"LTemplate`"], 
         ButtonBox["LClass",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info-b1050bb8-b948-47cd-be6e-89d2c6247521", {
            "LClass", "LTemplate`"}},
          ButtonNote->"LTemplate`"], 
         ButtonBox["LExpressionList",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info-b1050bb8-b948-47cd-be6e-89d2c6247521", {
            "LExpressionList", "LTemplate`"}},
          ButtonNote->"LTemplate`"], 
         ButtonBox["LTemplate",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info-b1050bb8-b948-47cd-be6e-89d2c6247521", {
            "LTemplate", "LTemplate`"}},
          ButtonNote->"LTemplate`"], 
         ButtonBox["UnloadTemplate",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info-b1050bb8-b948-47cd-be6e-89d2c6247521", {
            "UnloadTemplate", "LTemplate`"}},
          ButtonNote->"LTemplate`"]},
        {
         ButtonBox["ConfigureLTemplate",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info-b1050bb8-b948-47cd-be6e-89d2c6247521", {
            "ConfigureLTemplate", "LTemplate`"}},
          ButtonNote->"LTemplate`"], 
         ButtonBox["LClassContext",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info-b1050bb8-b948-47cd-be6e-89d2c6247521", {
            "LClassContext", "LTemplate`"}},
          ButtonNote->"LTemplate`"], 
         ButtonBox["LFun",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info-b1050bb8-b948-47cd-be6e-89d2c6247521", {
            "LFun", "LTemplate`"}},
          ButtonNote->"LTemplate`"], 
         ButtonBox["Make",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info-b1050bb8-b948-47cd-be6e-89d2c6247521", {
            "Make", "LTemplate`"}},
          ButtonNote->"LTemplate`"], 
         ButtonBox["ValidTemplateQ",
          BaseStyle->"InformationLink",
          ButtonData:>{
           "Info-b1050bb8-b948-47cd-be6e-89d2c6247521", {
            "ValidTemplateQ", "LTemplate`"}},
          ButtonNote->"LTemplate`"]},
        {
         ButtonBox["FormatTemplate",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info-b1050bb8-b948-47cd-be6e-89d2c6247521", {
            "FormatTemplate", "LTemplate`"}},
          ButtonNote->"LTemplate`"], 
         ButtonBox["LExpressionID",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info-b1050bb8-b948-47cd-be6e-89d2c6247521", {
            "LExpressionID", "LTemplate`"}},
          ButtonNote->"LTemplate`"], 
         ButtonBox["LoadTemplate",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info-b1050bb8-b948-47cd-be6e-89d2c6247521", {
            "LoadTemplate", "LTemplate`"}},
          ButtonNote->"LTemplate`"], 
         ButtonBox["TranslateTemplate",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info-b1050bb8-b948-47cd-be6e-89d2c6247521", {
            "TranslateTemplate", "LTemplate`"}},
          ButtonNote->"LTemplate`"], ""}
       },
       DefaultBaseStyle->"InfoGrid",
       GridBoxItemSize->{"Columns" -> {{
            Scaled[0.19]}}}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}]}, 
   Dynamic[Typeset`open$$],
   ImageSize->Automatic]]], "Print", "InfoCell"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Template elements", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "LTemplate"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"LTemplate[name, {LClass[\[Ellipsis]], LClass[\[Ellipsis]], \
\[Ellipsis]}] represents a library template.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info-47561812-6052-4351-be59-0d1da93bf6e0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "LClass"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"LClass[name, {fun1, fun2, \[Ellipsis]}] represents a class \
within a template.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info-57eaf585-6c37-4f1a-9f23-cd04780d63a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "LFun"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"LFun[name, {arg1, arg2, \[Ellipsis]}, ret] represents a class \
member function with the given name, argument types and return \
type.\\nLFun[name, LinkObject, LinkObject] represents a function that uses \
MathLink/WSTP based passing. The shorthand LFun[name, LinkObject] can also be \
used.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info-2270a8bc-e754-4733-a52e-221956b62d2d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "LExpressionID"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"LExpressionID[name] represents the data type corresponding to \
LClass[name, \[Ellipsis]] in templates.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info-b27e2e89-8e80-452f-9c66-6c7e984d3022"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["FormatTemplate", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FormatTemplate"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"FormatTemplate[template] formats the template in an easy to \
read way.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info-68226ed2-d2da-43e8-85d4-7aed542c528d"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["ValidTemplateQ", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "ValidTemplateQ"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"ValidTemplateQ[template] returns True if the template syntax \
is valid.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info-f4dd3ff1-c370-4c52-a58f-69bcbf970267"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["TranslateTemplate", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TranslateTemplate"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"TranslateTemplate[template] translates the template into C++ \
code.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info-5ed1c592-2100-4f81-bf3b-d1bda517b3cd"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["CompileTemplate", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CompileTemplate"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"CompileTemplate[template] compiles the library defined by the \
template. Required source files must be present in the current \
directory.\\nCompileTemplate[template, {file1, \[Ellipsis]}] includes \
additional source files in the compilation.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info-b1082e50-3750-462a-840e-4291b205cf5d"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"CompileTemplate", "[", "]"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " takes the same options as ",
 Cell[BoxData[
  FormBox["CreateLibrary", TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "Text"],

Cell[TextData[{
 Cell[BoxData[
  FormBox["CompileTemplate", TraditionalForm]],
  FormatType->"TraditionalForm"],
 " will unload the template before compilation."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["LoadTemplate & UnloadTemplate", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "LoadTemplate"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"LoadTemplate[template] loads the library defined by the \
template. The library must already be compiled.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info-c8950299-eebd-4613-b8fd-cd0d86a67f7f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "UnloadTemplate"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"UnloadTemplate[template] attempts to unload the library \
defined by the template.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info-0f638c7d-40dd-4a76-baae-525c4afd45b4"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Library expression management", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Make"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"Make[class] creates an instance of class.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info-e2b499d0-1811-46a2-828c-3d568aad8484"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "LExpressionList"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"LExpressionList[class] returns all existing instances of \
class.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info-00585026-176c-404a-8007-2d1e6f758a59"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "LClassContext"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"LClassContext[] returns the context where class symbols are \
created.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info-140d6223-f287-42ab-bd8f-a18a405855ce"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["C++", "Subsection"],

Cell[CellGroupData[{

Cell["Basic types", "Subsubsection"],

Cell["Basic LibraryLink types are mapped to C++ equivalents as", "Text"],

Cell["\<\
Integer\t\t\tmint
Real\t\t\tdouble
Complex\t\t\tmma::complex_t  =  std::complex<double>
\"UTF8String\"\tconst char *
\"Boolean\"\t\tbool\
\>", "Program"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tensor types", "Subsubsection"],

Cell["Tensors are mapped as", "Text"],

Cell["\<\
{Integer, _}\tIntTensorRef      =  TensorRef<mint>
{Real, _}\t\tRealTensorRef     =  TensorRef<double>
{Complex, _}\tComplexTensorRef  =  TensorRef<mma::complex_t>\
\>", "Program"],

Cell[TextData[{
 StyleBox["MatrixRef<T>", "Program"],
 " and ",
 StyleBox["CubeRef<T>", "Program"],
 " are subclasses of ",
 StyleBox["TensorRef<T>", "Program"],
 " and make it easier to work with 2D and 3D tensors by providing direct \
indexing though ",
 StyleBox["operator (mint i, mint j)", "Program"],
 ". Any tensor can be treated as a flat vector and indexed using ",
 StyleBox["operator []", "Program"],
 "."
}], "Text"],

Cell["\<\
{Integer, 2}\tIntMatrixRef      =  MatrixRef<mint>
{Real, 2}\t\tRealMatrixRef     =  MatrixRef<double>
{Complex, 2}\tComplexMatrixRef  =  MatrixRef<mma::complex_t>

{Integer, 3}\tIntCubeRef      =  CubeRef<mint>
{Real, 3}\t\tRealCubeRef     =  CubeRef<double>
{Complex, 3}\tComplexCubeRef  =  CubeRef<mma::complex_t>\
\>", "Program"],

Cell[TextData[{
 "The tensor types are simple wrappers around ",
 StyleBox["MTensor", "Program"],
 ", and act as references, i.e. multiple ",
 StyleBox["TensorRef", "Program"],
 " may point to the same LibraryLink tensor."
}], "Text"],

Cell[TextData[{
 "One, two and three-dimensional tensors can be created using the following, \
where ",
 StyleBox["T", "Program"],
 " must be one of ",
 StyleBox["mint", "Program"],
 ", ",
 StyleBox["double", "Program"],
 " or ",
 StyleBox["complex_t", "Program"],
 "."
}], "Text"],

Cell["\<\
makeVector<T>(mint len);
makeMatrix<T>(mint rows, mint cols);
makeCube<T>(mint rows, mint cols, mint slices);\
\>", "Program"],

Cell["\<\
We can also create a vector or matrix based on existing data. The data will \
be copied.\
\>", "Text"],

Cell["\<\
makeVector<T>(mint len, const U *data);
makeMatrix<T>(mint nrow, mint ncol, const U *data); // assumes data uses \
row-major storage
makeMatrixTransposed<T>(mint nrow, mint ncol, const U *data); // assumes data \
uses column-major storage\
\>", "Program"],

Cell[TextData[{
 "Tensor patterns without type specifications, i.e. ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"_", ",", "_"}], "}"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", are not supported."
}], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["SparseArray", "Subsubsection"],

Cell["\<\
LibraryDataType[SparseArray, Integer]\tSparseArrayRef<mint>
LibraryDataType[SparseArray, Real]\t\tSparseArrayRef<double>
LibraryDataType[SparseArray, Complex]\tSparseArrayRef<mma::complex_t>\
\>", "Program"],

Cell[TextData[{
 "Optionally a rank specification can be given, for example ",
 Cell[BoxData[
  FormBox[
   RowBox[{"LibraryDataType", "[", 
    RowBox[{"SparseArray", ",", "Integer", ",", "2"}], "]"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "Text"],

Cell[TextData[{
 "Sparse array patterns without type specifications, i.e. ",
 Cell[BoxData[
  FormBox[
   RowBox[{"LibraryDataType", "[", "SparseArray", "]"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", are not supported."
}], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["LExpressionID", "Subsubsection"],

Cell["LExpressionID[\"SomeClass\"]\tSomeClass &", "Program"],

Cell[TextData[{
 "Arguments of type ",
 Cell[BoxData[
  FormBox[
   RowBox[{"LExpressionID", "[", "\"\<SomeClass\>\"", "]"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " are handled specially. On the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " side a managed library expression ID is expected, i.e. an integer. This \
can be obtained from a managed library expression using the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"ManagedLibraryExpressionID", "[", "]"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". On the C++ side it will be passed as a reference to a class instance, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"SomeClass", " ", "&"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Strings", "Subsubsection"],

Cell[TextData[{
 "Strings are mapped to ",
 StyleBox["const char *", "Program"],
 " and must not be modified, except for freeing the input argument."
}], "Text"],

Cell[TextData[{
 "With LibraryLink, freeing strings that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " passes in is always the library\[CloseCurlyQuote]s responsibility.  A \
convenience function is provided for this as ",
 StyleBox["libData->UTF8String_disown()", "Program"],
 " does not accept a ",
 StyleBox["const char *", "Program"],
 " due to the ",
 StyleBox["const", "Program"],
 " qualifier."
}], "Text"],

Cell["\<\
void disownString(const char *); // wrapper for UTF8String_disown\
\>", "Program"]
}, Open  ]],

Cell[CellGroupData[{

Cell["LinkObject passing", "Subsubsection"],

Cell["\<\
The template syntax for LinkObject passing is \
LFun[\[OpenCurlyDoubleQuote]functionName\[CloseCurlyDoubleQuote], \
LinkObject].  The C++ equivalent must have the following signature:\
\>", "Text"],

Cell["void functionName(MLINK link);", "Program"],

Cell["\<\
The mlstream.h auxiliary header provides a stream inserter/extractor based \
syntax for reading arguments and returning results.\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Other functions", "Subsubsection"],

Cell["Some other useful functions are", "Text"],

Cell["\<\
void check_abort();
void message(const char *msg, MessageType type = M_INFO);
void print(const char *msg);
massert(condition) // analogous to C's standard assert macro, but doesn't \
kill the kernel\
\>", "Program"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Error handling", "Subsubsection"],

Cell["\<\
An LTemplate function can report an error and exit immediately by throwing a \
mma::LibraryError exception. The following constructors are available:\
\>", "Text"],

Cell["\<\
LibraryError(int error_code = LIBRARY_FUNCTION_ERROR);
LibraryError(std::string message, int error_code = LIBRARY_FUNCTION_ERROR);\
\>", "Program"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]]
},
WindowSize->{990, 700},
WindowMargins->{{138, Automatic}, {Automatic, 7}},
PrivateNotebookOptions->{"FileOutlineCache"->False},
TrackCellChangeTimes->False,
FrontEndVersion->"10.2 for Mac OS X x86 (32-bit, 64-bit Kernel) (July 6, \
2015)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData["Section"], ShowGroupOpener -> True], 
   Cell[
    StyleData["Subsection"], ShowGroupOpener -> True], 
   Cell[
    StyleData["Subsubsection"], ShowGroupOpener -> True]}, 
  WindowSize -> {808, 751}, 
  WindowMargins -> {{300, Automatic}, {28, Automatic}}, Visible -> False, 
  FrontEndVersion -> 
  "10.2 for Mac OS X x86 (32-bit, 64-bit Kernel) (July 6, 2015)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]

